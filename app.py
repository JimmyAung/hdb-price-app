# app.py
import streamlit as st

# --- NEW: optional model loader (safe if file not present) ---
import os
import joblib

@st.cache_resource
def load_model():
    """Load model.pkl if present; otherwise return None."""
    path = "model.pkl"
    if os.path.exists(path):
        try:
            return joblib.load(path)
        except Exception as e:
            st.warning(f"Found model.pkl but failed to load it: {e}")
            return None
    return None

model = load_model()




st.set_page_config(page_title="HDB Price Predictor", layout="centered")
st.title("üè† Singapore HDB Resale Price ‚Äî Interactive Model")

# Show whether we're using dummy or real model
if model is None:
    st.info("üîß No `model.pkl` found ‚Äî using **dummy formula** for now.")
else:
    st.success("‚úÖ `model.pkl` loaded ‚Äî real predictions can be wired next.")

with st.form("price_form"):
    floor_area_sqft = st.number_input("Floor area (sqft)", 100, 3500, 700, 10)
    flat_type = st.selectbox("Flat Type", ["2-Room", "3-Room", "4-Room", "5-Room", "Executive"], 1)
    floor_level_range = st.selectbox("Floor Level Range", ["Mid Lower Level", "Mid Upper Level", "Upper Level"], 0)
    region = st.selectbox("Region", ["East", "North", "North-East", "West"], 0)
    years_of_lease_left = st.number_input("Years of lease left", 0, 99, 70, 1)
    mall_within_2km = st.number_input("Number of malls within 2km", 0, 45, 5, 1)
    Hawker_within_2km = st.number_input("Number of hawker centres within 2km", 0, 25, 3, 1)
    mrt_interchange = st.checkbox("Near MRT interchange?", value=False)
    mrt_nearest_distance = st.number_input("MRT distance (meters)", 0, 4000, 800, 10)
    commercial = st.checkbox("Commercial present in the block (shops/offices)?", value=False)
    submitted = st.form_submit_button("Predict Resale Price")


import pandas as pd

# 1) List of columns the model was trained on (use the final set your teammate used)
FEATURE_COLS = [
    'floor_area_sqft', 'commercial', 'Mall_Within_2km', 'Hawker_Within_2km',
    'mrt_nearest_distance', 'mrt_interchange', 'years_of_lease_left',
    '2 ROOM', '3 ROOM', '4 ROOM', '5 ROOM', 'EXECUTIVE',
    'Mid Lower Level', 'Mid Upper Level', 'Upper Level',
    'east', 'north', 'north_east', 'west', 'vacancy'
]

# 2) Start with zeros for all features
row = {c: 0 for c in FEATURE_COLS}

# 3) Fill numeric fields from the UI
row['floor_area_sqft']      = float(floor_area_sqft)
row['years_of_lease_left']  = float(years_of_lease_left)

# Optional numeric inputs you may add to the UI (give sensible defaults in the widgets):
# st.number_input("MRT distance (meters)", 0, 5000, 800, 10)
# st.checkbox("Near interchange?"), etc.
# If you already added them, set them here:
# row['mrt_nearest_distance'] = float(mrt_nearest_distance)
# row['mrt_interchange']      = 1 if near_interchange else 0

# 4) One-hot for room type (from your selectbox)
#    UI values should be exactly one of: "2 ROOM","3 ROOM","4 ROOM","5 ROOM","EXECUTIVE"
room_key = flat_type
if room_key in row:
    row[room_key] = 1

# 5) One-hot for floor level band (if you add a radio to UI)
#    options example: ["Mid Lower Level","Mid Upper Level","Upper Level"]
# if level_band in row: row[level_band] = 1

# 6) One-hot for region (if you add a radio to UI)
#    options example: ["east","north","north_east","west"]
# if region in row: row[region] = 1

# 7) Binary toggles (if you add checkboxes to UI)
# row['commercial']       = 1 if is_commercial else 0
# row['Mall_Within_2km']  = 1 if near_mall else 0
# row['Hawker_Within_2km']= 1 if near_hawker else 0
# row['vacancy']          = 1 if vacancy_flag else 0

# 8) Make DataFrame in the correct column order
ui_df = pd.DataFrame([row], columns=FEATURE_COLS)

try:
    y_pred = float(model.predict(ui_df)[0])
    st.success(f"**Estimated Price (Model):** S${y_pred:,.0f}")
    st.caption("Prediction generated by the loaded model.pkl")
except Exception as e:
    st.error(f"Model is loaded but failed to predict: {e}")
    st.info("Falling back to a simple dummy estimate.")
    dummy_price = 500_000 + (floor_area_sqft * 120) + (years_of_lease_left * 500)
    st.success(f"**Estimated Price (Dummy):** S${dummy_price:,.0f}")